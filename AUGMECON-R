Set
   I 'constraints'         / i1* i5 /
   J 'decision variables'  / j1*j10 /
   K 'objective functions' / k1* k5 /
   ;

Parameter
   dir(k) 'direction of the objective functions 1 for max and -1 for min' / k1 1, k2 1, k3 1, k4 1, k5 1  /
   b(I)   'RHS of the constraints' /  i1 220, i2 175 , i3 215, i4 150, i5 190/;



Table c(J,K) 'matrix of objective function coefficients C'
           k1        k2        k3        k4        k5
j1         14        17        17        28        27
j2         43        11        32        15        32
j3         26        26        18        29        27
j4         24        22        42        34        21
j5         25        29        13        42        25
j6         31        39        17        42        41
j7         36        41        47        37        27
j8         29        50        15        31        50
j9         45        47        17        17        36
j10        45        50        20        47        39
  ;
Table a(J,I) 'matrix of technological coefficients A'
            i1       i2        i3        i4        i5
j1         29        38        47        29        36
j2         29        47        45        40        48
j3         35        41        23        23        11
j4         46        33        13        45        23
j5         14        35        42        14        27
j6         46        41        19        33        34
j7         30        46        22        21        21
j8         16        36        28        50        43
j9         23        13        18        50        46
j10        29        16        39        13        45
;

Variable
  Z(K) 'objective function variables'
   X(J) 'decision variables';

Binary Variable X;
Equations
   objfun(K)    objective functions
   con(I)    constraints
;
objfun(K).. sum(J,c(J,K)*X(J)) =e= Z(K);
con(I).. sum(J, a(J,I)*X(J)) =l= b(I);
Model example / all /;
$STitle eps-constraint method

Set k1(k) the first element of k, km1(k) all but the first elements of k;
k1(k)$(ord(k)=1) = yes; km1(k)=yes; km1(k1) = no;
Set kk(k)     active objective function in constraint allobj  ;

Parameter
   rhs(k)     right hand side of the constrained obj functions in eps-constraint
   maxobj(k)  maximum value from the payoff table
   minobj(k)  minimum value from the payoff table
   numk(k) ordinal value of k starting with 1   ;

Scalar
iter   total number of iterations
infeas total number of infeasibilities
elapsed_time elapsed time for payoff and e-sonstraint
start start time
finish finish time      ;

Variables
   a_objval   auxiliary variable for the objective function
   obj        auxiliary variable during the construction of the payoff table ;
Positive Variables
   sl(k)      slack or surplus variables for the eps-constraints   ;

Equations
   con_obj(k) constrained objective functions
   augm_obj   augmented objective function to avoid weakly efficient solutions
   allobj     all the objective functions in one expression;

con_obj(km1)..   z(km1) - dir(km1)*sl(km1) =e= rhs(km1);

* We optimize the first objective function and put the others as constraints
* the second term is for avoiding weakly efficient points
* objfun=max z1 + 0.001*(s1/r1+0.1 s2/r2+ 0.01*s3/r3+...)
augm_obj..
  sum(k1,dir(k1)*z(k1))+1.0e-3*sum(km1,power(10,-(numk(km1)-1))*sl(km1)/(maxobj(km1)-minobj(km1))) =e= a_objval;

allobj..  sum(kk, dir(kk)*z(kk)) =e= obj;

Model mod_payoff    / example, allobj / ;
Model mod_epsmethod / example, con_obj, augm_obj / ;

Parameter
  payoff(k,k)  payoff tables entries;
Alias(k,kp);

option optcr=0.0;
option limrow=0, limcol=0, solprint=off ,solveLink = %solveLink.LoadLibrary%;
;
$offlisting;
$offsymxref;
$offsymlist;
$offuelxref;
$offuellist;
*file cplexopt /cplex.opt/;
*put cplexopt;
*put 'threads 4'/;
*put 'parallelmode 1'/;
*putclose cplexopt;
*mod_epsmethod.optfile=1;
*option optca=0.;
*mod_payoff.optfile=1;
*mod_epsmethod.optfile=1;

* Generate payoff table applying lexicographic optimization
loop(kp,
  kk(kp)=yes;
  repeat
    solve mod_payoff using mip maximizing obj;
    payoff(kp,kk) = z.l(kk);
    z.fx(kk) = z.l(kk);
    kk(k++1) = kk(k);
  until kk(kp); kk(kp) = no;
* release the fixed values of the objective functions for the new iteration
  z.up(k) = inf; z.lo(k) =-inf;
);
if (mod_payoff.modelstat<>1 and mod_payoff.modelstat<>8, abort 'no optimal solution for mod_payoff');

File fx  / 5kp10.txt /;

PUT fx ' PAYOFF TABLE'/   ;
loop (kp,
        loop(k, put payoff(kp,k):12:2);
        put /;
     );
put fx /;

*display payoff;
minobj(k)=floor(0.95*smin(kp,payoff(kp,k)));
**$ontext
maxobj(k)=smax(kp,payoff(kp,k));

*$ontext
*$set fname h.%scrext.dat%
*gridpoints=max integer of km1 = 4149

$if not set gridpoints_1   $set gridpoints_1 307
$if not set gridpoints_2   $set gridpoints_2  232
$if not set gridpoints_3   $set gridpoints_3  242
$if not set gridpoints_4   $set gridpoints_4  183
Set g grid points /g0*g%gridpoints_1%/
    grid(k,g) 'grid '
     q    /q0*q%gridpoints_1%/
 r     /r0*r%gridpoints_2%/
   s    /s0*s%gridpoints_3 %/
  t     /t0*t%gridpoints_4 %/

   ;


Parameter
    gridrhs(k,g)
    maxg(k) maximum point in grid for objective k
    posg(k) grid position of objective k
    firstOffMax, lastZero,  current1, current2, current3, current4, synthiki, b2, b3, b4, b5, terminal1, terminal2, terminal3, terminal4, control1, control2 some counters
*    numk(k) ordinal value of k starting with 1
    numg(g) 'ordinal value of g starting with 0  '
    step(k) step of grid points in objective functions
    jump(k) jumps in the grid points' traversing only for the first objective function
   numq(q)   ordinal value of q starting with 0
   numr(r)    ordinal value of r starting with 0
   nums(s)   ordinal value of s starting with 0
   numt(t)   ordinal value of t starting with 0
 flag(q,r,s,t)   optimization control matrix
;

lastZero=1; loop(km1, numk(km1)=lastZero; lastZero=lastZero+1); numg(g) = ord(g)-1;
 numq(q) = ord(q)-1;
 numr(r) = ord(r)-1;
 nums(s) = ord(s)-1;
 numt(t) = ord(t)-1;
*initialization of flag matrix
loop(q,
       loop(r,
            loop(s,
                loop(t,flag(q,r,s,t)=0););););

grid(km1,g) = yes;
maxg(k)=(maxobj(k)-minobj(k));
step(km1)   = 1 ;
gridrhs(grid(km1,g))$(dir(km1)=-1) = maxobj(km1) - numg(g)/maxg(km1)*(maxobj(km1)- minobj(km1));
gridrhs(grid(km1,g))$(dir(km1)=1) = minobj(km1) + numg(g)*step(km1);
*display gridrhs;

PUT fx ' Grid points'/   ;
loop (g,
       loop(km1, put gridrhs(km1,g):12:2);
        put /;   );
put fx /;
put fx 'Efficient solutions'/;

* Walk the grid points and take shortcuts if the model becomes infeasible
posg(km1) = 0;
iter=0;
infeas=0;
terminal1=0;
terminal2=0;
terminal3=0;
terminal4=0;
terminal1=sum(km1$(numk(km1)=1),maxg(km1));
terminal2=sum(km1$(numk(km1)=2),maxg(km1));
terminal3=sum(km1$(numk(km1)=3),maxg(km1));
terminal4=sum(km1$(numk(km1)=4),maxg(km1));
 synthiki=0;
  control1=0;
start=jnow;

repeat
  rhs(km1) = sum(grid(km1,g)$(numg(g)=posg(km1)), gridrhs(km1,g));
  current1=0;
  current2=0;
  current3=0;
  current4=0;
  current1=sum(km1$(numk(km1)=1),posg(km1))  ;
  current2=sum(km1$(numk(km1)=2),posg(km1))  ;
  current3=sum(km1$(numk(km1)=3),posg(km1))  ;
  current4=sum(km1$(numk(km1)=4),posg(km1))  ;

 loop(q$(numq(q)=  current1),
       loop(r$(numr(r)=current2),
            loop(s$(nums(s)=current3),
                   loop(t$(numt(t)=current4), synthiki=flag(q,r,s,t)););););
  if(synthiki=0,  solve mod_epsmethod maximizing a_objval using mip);
  iter=iter+1;
  if (synthiki=0 and mod_epsmethod.modelstat<>1 and mod_epsmethod.modelstat<>8,
    infeas=infeas+1;
    put fx iter:5:0, '  infeasible'/;
    lastZero = 0; loop(km1$(posg(km1)>0 and lastZero=0), lastZero=numk(km1));
    posg(km1)$(numk(km1)<=lastZero) = maxg(km1);
   loop(t$(numt(t)>=current4 and numt(t)<=terminal4),
       loop(s$(nums(s)>=current3 and nums(s)<= terminal3),
           loop(r$(numr(r)>=current2 and numr(r)<= terminal2),
               loop(q$(numq(q)=current1), flag(q,r,s,t)= terminal1-current1+1););););

   else if(synthiki=0 ,
    put fx iter:5:0;
    loop(k, put fx z.l(k):12:2);
    put fx ' *** ';
    loop(km1, put fx sl.l(km1):12:2, put fx posg(km1):6:0);
    put fx ' *** ';
   loop(km1$(numk(km1)=1),b2=floor(sl.l(km1)/step(km1)));
   loop(km1$(numk(km1)=2),b3=floor(sl.l(km1)/step(km1)));
   loop(km1$(numk(km1)=3),b4=floor(sl.l(km1)/step(km1)));
   loop(km1$(numk(km1)=4),b5=floor(sl.l(km1)/step(km1)));
   loop(t$(numt(t)>=current4 and numt(t)<= current4+b5),
         loop(s$(nums(s)>=current3 and nums(s)<= current3+b4),
               loop(r$(numr(r)>=current2 and numr(r)<= current2+b3),
                    loop(q$(numq(q)=current1) ,   flag(q,r,s,t)=b2+1););););

   jump(km1)=1;

    put fx ' * ';
    jump(km1)$(numk(km1)=1)=1+floor(sl.L(km1)/step(km1));
    loop(km1, put fx jump(km1):5:0) ;
    loop(km1$(jump(km1)> 1),  put '   jump')
    put /;
    );
   );

 jump(km1)$(numk(km1)>1)=1 ;
* Proceed forward in the grid
  control1=0;
  firstOffMax = 0;
loop(km1$(posg(km1)<maxg(km1) and firstOffMax=0 and numk(km1)=1 and synthiki>0),control2=posg(km1)+synthiki;posg(km1)=min(posg(km1)+synthiki,maxg(km1)); firstOffMax=numk(km1) );
loop(km1$(posg(km1)=maxg(km1) and numk(km1)=1 and synthiki>0 and firstOffMax>0 and control2>maxg(km1)), control1=1);
loop(km1$(posg(km1)<maxg(km1) and firstOffMax=0 and numk(km1)=1 and synthiki=0), posg(km1)=min((posg(km1)+jump(km1)),maxg(km1)); firstOffMax=numk(km1));
loop(km1$(posg(km1)<maxg(km1) and firstOffMax=0 and numk(km1)>1), posg(km1)=min((posg(km1)+jump(km1)),maxg(km1)); firstOffMax=numk(km1));

loop(km1$(posg(km1)<maxg(km1) and control1>0 and numk(km1)>1), posg(km1)=min((posg(km1)+jump(km1)),maxg(km1)); firstOffMax=numk(km1); control1=0);

                       posg(km1)$(numk(km1)<firstOffMax) = 0  ;
until sum(km1$(posg(km1)=maxg(km1)),1)= card(km1) and firstOffMax=0;
finish=jnow;
elapsed_time=(finish-start)*86400;
put /;
put 'Infeasibilities = ', infeas:5:0 /;
put 'Elapsed time: ',elapsed_time:10:2, ' seconds' / ;
*$offtext
putclose fx;
**$offtext

